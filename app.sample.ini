[app]
# The application title, displayed on the status page
title=Some Application

# Build status uri -- This is the URI to display an HTML page displaying the
# build status. This will be sent in STATUS requests to GitHub. It does not
# need to be public facing, but anyone who can see your repo should also be
# able to see the contents.
status_uri=http://build.example.com/status/{sha1}

# Build status endpoint -- The is the relative uri to the status for a build
;status_endpoint=/status/<sha1>

# Push endpoint -- This is the relative uri that GitHub will push to
;push_endpoint=/gh/push/

# Port to listen on (default 7000)
;port=7000

# Max cleanup frequency. We'll look for stale builds this often (if there are
# no builds in the queue. This is in seconds (default 5 minute)
;cleanup_frequency=300

# The default context to use (if there is an issue outside of a build)
;default_context=build

[files]
# Storage root path; the default is the path of buildtester.py / storage
;storage=/path/to/buildtester/storage/

# Builds path (stores json encoded responses); the default is the path of
# buildtester.py / builds
;builds=/path/to/buildtester/storage/builds

# Temp path; the default is the path of buildtester.py / temp
# NOTE that this is where the GitHub repository is cloned into and it
# should not contain anything else -- it WIll be destroyed
;temp=/path/to/buildtester/storage/temp

# The path of a file to look for work in. This should just contain SHA1 hashes
# Default is disabled (empty)
# If empty, a file-based queue will not be used
;pickup=
;pickup=/path/to/buildtester/storage/pickup

[status]
# Somewhat self explanatory. These are nicified statuses. They are sent to
# GitHub as the description of a build status

;success=The build succeeded

;error=The build failed due to an internal error

;failure=The build failed

;queued=The build is queued

;pending=The build is in progress

[github]
# Access token for GitHub. This can be generated at the following URI:
# https://github.com/settings/tokens
# NOTE: The only scope it requires is repo:status. Content type must be
# application/json and the "Just the push event" option is sufficient. The
# payload URL should be the full path to push_uri defined below
# i.e. (http://build.example.com/gh/push)
access_token=ce112a266fafee31ebdf87bfc98f53c2537f14a3

# Code for making WebHooks handlers securer
;webhooks_secret=super-secret-code

# The URI to the repository to use
repository=git@github.com:user/repo.git

# The branch to use. This is used both for checking out the repository and
# for making sure that push webhooks are for the correct branch
branch=dev

# status endpoint. This should be in the form repos/:user/:repo/statuses/{sha1}
# This is where we'll send POST requests before, during, and after a build
status_endpoint=repos/user/repo/statuses/{sha1}

# This is for display purposes only (on the build status page). This is the
# URI to a given commit on GH
commit_uri=https://github.com/user/repo/commit/{sha1}

[commands]
# The key is the label and the value is the command to run. The working dir
# will be the temp directory. If there are pipes in the key, the left side will
# be the status context (sent to GH) and the right side the label. The context
# will always be lowercase.
;build|Configure=cmake .
;build|Build=make
;test|Test=./build/bin/Test
